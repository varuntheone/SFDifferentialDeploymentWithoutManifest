<project name="test" default="sync" xmlns:sf="antlib:com.salesforce">
	<property environment="env"/>
	<property name="sf.username"      value="${env.username}"/>
	<property name="sf.password"      value="${env.password}"/>
	<property name="sf.clientId"      value="${env.clientId}"/>
	<property name="sf.clientSecret"      value="${env.clientSecret}"/>
	<property name="sf.refreshToken"      value="${env.refreshToken}"/>
	<property name="sf.serverurl"      value="${env.serverurl}"/>
	<property name="sf.branch"      value="${env.branch}"/>
	<property name="canDeploy" value="false"/>
	
	<!-- <property name="sf.fetchFromDuration"      value="${env.fetchFromDuration}"/> -->
	<taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
		<classpath>
			<pathelement location="lib/ant-salesforce.jar"/>
		</classpath>
	</taskdef>
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="lib/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
		<classpath>
			<pathelement location="lib/xmltask.jar"/>
		</classpath>
	</taskdef>
    <macrodef name="gitDiff">
		<sequential>
			<exec executable="git" outputproperty="git.diff">
				<arg value="diff" />
				<arg value="--pretty=format:" />
				<arg value="--name-only" />
				<arg value="${env.GIT_COMMIT}" />
				<arg value="${env.GIT_PREVIOUS_SUCCESSFUL_COMMIT}" />
			</exec>
			<echo>Inside git Difference</echo>
			<echo>${git.diff}</echo>
		</sequential>
	</macrodef>

	<target name="diffBuilderWithGitCommit">
		<delete dir="${sf.deployDir}"/>
		<mkdir dir="${sf.deployDir}"/>
		<copy file="${sf.samplePackageXML}" tofile="${sf.deployDir}/package.xml"/>
		<echo>One</echo>
		<echo>Current GIT Commit : ${env.GIT_COMMIT}</echo>
		<echo>Previous Known Successful GIT Commit : ${env.GIT_PREVIOUS_SUCCESSFUL_COMMIT}</echo>
		<echo>Two</echo>
		<gitDiff/>
		<echo>Three</echo>
		<for list="${git.diff}" param="currentDiff" delimiter="${line.separator}">
			<echo>Four</echo>
			<sequential>
				<if>
					<and>
						<available file="@{currentDiff}"/>
						<matches string="@{currentDiff}" pattern="src/"/>
						<not>
						      <matches string="@{currentDiff}" pattern="package.xml"/>
						</not>
					</and>
					<then>
						<echo>Five</echo>
						<if>
							<matches string="@{currentDiff}" pattern="src/aura/"/>
							<then>
								<echo>Six</echo>
								<propertyregex
									property="auraFolder"
									input="@{currentDiff}"
									regexp="src\/aura\/([a-zA-Z\_]*)\/[a-zA-Z0-9\/\.\_]*"
									select="\1"
									casesensitive="true" 
									override="true"
									defaultValue=""/>
								<if>
									<not>
										<available file="${sf.deployDir}/aura/${auraFolder}" type="dir"/>
									</not>
									<then>
										<echo>Current Component : ${auraFolder}</echo>
										<copy todir="${sf.deployDir}" verbose="false">
											<fileset dir="src">
												<include name="aura/${auraFolder}/**" />
											</fileset>
										</copy>
										<propertyregex
											property="component"
											input="@{currentDiff}"
											regexp="src\/([a-zA-Z]*)\/[a-zA-Z0-9\/\.\_]*"
											select="\1"
											casesensitive="true" 
											override="true"
											defaultValue=""/>
										<propertycopy property="packagedName" from="sf.${component}" override="true"/>
										<echo>Generating Package.xml : ${component} with ${packagedName}</echo>
										<xmltask source="${sf.deployDir}/package.xml" dest="${sf.deployDir}/package.xml">
											<remove path="/Package/types[name/text()=${packagedName}]"/>
											<insert path="//*[local-name()='Package']"> <![CDATA[
				<types>
				<name>${packagedName}</name>
				<members>*</members>
				</types>
											]]>
											</insert>
										</xmltask>
									</then> 
								</if>
							</then>
							<else>
								<propertyregex
									property="currentDiffWithoutSRC"
									input="@{currentDiff}"
									regexp="src\/([a-zA-Z]*\/[a-zA-Z0-9\/\.\_]*)"
									select="\1"
									casesensitive="true" 
									override="true"
									defaultValue=""/>
								<echo>Current Component : ${currentDiffWithoutSRC}</echo>
								<copy todir="${sf.deployDir}" verbose="false">
									<fileset dir="src">
										<include name="${currentDiffWithoutSRC}" />
									</fileset>
								</copy>
								<if>
									<available file="@{currentDiff}-meta.xml"/>
									<then>
										<echo>Generating meta-xml : @{currentDiff}</echo>
										<copy todir="${sf.deployDir}" verbose="false">
											<fileset dir="src">
												<include name="${currentDiffWithoutSRC}-meta.xml" />
											</fileset>
										</copy>
									</then>
								</if>
								<propertyregex
									property="component"
									input="@{currentDiff}"
									regexp="src\/([a-zA-Z]*)\/[a-zA-Z0-9\/\.\_]*"
									select="\1"
									casesensitive="true" 
									override="true"
									defaultValue=""/>
								<propertycopy property="packagedName" from="sf.${component}" override="true"/>
								<echo>Generating Package.xml : ${component} with ${packagedName}</echo>
								<xmltask source="${sf.deployDir}/package.xml" dest="${sf.deployDir}/package.xml">
									<remove path="/Package/types[name/text()=${packagedName}]"/>
									<insert path="//*[local-name()='Package']"> <![CDATA[
		<types>
		<name>${packagedName}</name>
		<members>*</members>
		</types>
									]]>
									</insert>
								</xmltask> 
							</else>
						</if>
						<var name="canDeploy" unset="true"/>
						<property name="canDeploy" value="true"/>
					</then>
				</if>
			</sequential>
		</for>
    </target>

	<property file="build.properties"/>
	
    <target name="ret">
    	<mkdir dir="src"/>
    	<sf:retrieve username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="src" unpackaged="package.xml"/>
    </target>

    <target name="deploy">
		<echo>Deployment Begins...</echo>
		<echo>Can Deploy :${canDeploy}</echo>
		<if>
			<and><equals arg1="${canDeploy}" arg2="true"/> </and>
			<then>
				<sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="${sf.deployDir}" rollbackOnError="true"/>
			</then>
			<else>
				<echo>Nothing to deploy</echo>
			</else>
		</if>
    </target>
	
	<target name="getSessionId">
    	<exec executable="curl" outputproperty="curl.result">
			<arg line="-X POST ${sf.serverurl}/services/oauth2/token?grant_type=refresh_token&amp;client_id=${sf.clientId}&amp;client_secret=${sf.clientSecret}&amp;refresh_token=${sf.refreshToken}"/>
		</exec>
		<echo>${curl.result}</echo>
		<for param="line" list="${curl.result}" delimiter="${line.separator}">
		 <sequential>
			<if>
				<matches pattern="${response.regex}" string="@{line}"/>
				<then>
					<propertyregex
						property="accessToken"
						input="@{line}"
						regexp="${response.regex}"
						select="\1"
						casesensitive="false"/>
				</then>
			</if>
		  </sequential>
		</for>
		<echo>Access Token Obtained From Salesforce :  ${accessToken}</echo>
    </target>
	
	<target name="deployProd" depends="getSessionId">
		<echo>Deployment Begins...</echo>
		<if>
			<and><equals arg1="${canDeploy}" arg2="true"/> </and>
			<then>
				<fail message="Test Class Not Specified" unless="env.testClass"/>
				<echo>${env.testClass}</echo>
				<script language="javascript"><![CDATA[
				var deployTask = project.createTask('antlib:com.salesforce:deploy');
				deployTask.setSessionId(project.getProperty("accessToken"));
				deployTask.setServerURL(project.getProperty("sf.serverurl"));
				deployTask.setDeployRoot(project.getProperty("sf.deployDir"));
				deployTask.setTestLevel('RunSpecifiedTests');
				deployTask.setMaxPoll(project.getProperty("sf.maxPoll"));
				var tests = project.getProperty("env.testClass");
				if (tests) {
					deployTask.setTestLevel('RunSpecifiedTests');
					tests = tests.split(',');
					for (var i = 0; i < tests.length; i++) {
						var runTest = java.lang.Class.forName(
						"com.salesforce.ant.DeployTask$CodeNameElement"
						).newInstance();
						runTest.addText(tests[i]);
						deployTask.addRunTest(runTest);
					}
					deployTask.perform();
				}
				]]></script>
			</then>
			<else>
				<echo>Nothing to deploy</echo>
			</else>
		</if>
    </target>
	
	<target name="validateProd" depends="getSessionId">
		<echo>Validation Begins...</echo>
		<if>
			<and><equals arg1="${canDeploy}" arg2="true"/> </and>
			<then>
				<fail message="Test Class Not Specified" unless="env.testClass"/>
				<echo>${env.testClass}</echo>
				<script language="javascript"><![CDATA[
				var deployTask = project.createTask('antlib:com.salesforce:deploy');
				deployTask.setSessionId(project.getProperty("accessToken"));
				deployTask.setServerURL(project.getProperty("sf.serverurl"));
				deployTask.setDeployRoot(project.getProperty("sf.deployDir"));
				deployTask.setCheckonly(true);
				deployTask.setTestLevel('RunSpecifiedTests');
				deployTask.setMaxPoll(project.getProperty("sf.maxPoll"));
				var tests = project.getProperty("env.testClass");
				if (tests) {
					deployTask.setTestLevel('RunSpecifiedTests');
					tests = tests.split(',');
					for (var i = 0; i < tests.length; i++) {
						var runTest = java.lang.Class.forName(
						"com.salesforce.ant.DeployTask$CodeNameElement"
						).newInstance();
						runTest.addText(tests[i]);
						deployTask.addRunTest(runTest);
					}
					deployTask.perform();
				}
				]]></script>
			</then>
			<else>
				<echo>Nothing to deploy</echo>
			</else>
		</if>
    </target>

	<target name="builderWithGitDiff" depends="diffBuilderWithGitCommit,deploy">
		
    </target>
	
	<target name="builderProd" depends="diffBuilderWithGitCommit,deployProd">
		
    </target>
	<target name="builderValidateProd" depends="diffBuilderWithGitCommit,validateProd">
		
    </target>
</project>